spring.application.name: rtddecrypter
logging:
  level:
    root: INFO
    org.apache.kafka: WARN

# OpenTelemetry
applicationinsights.enabled: '@applicationinsights.enabled@'
otel.log.level: ${OPENTELEMETRY_LOG_LEVEL:INFO}
otel.instrumentation.logback-appender.enabled: true # enable logback instrumentation
otel.traces.sampler.probability: 1.0 # sample probability for tracing (spans)
otel.metric.export.interval: 60000 # sampling rate for metrics (millis)
otel.exporter.otlp.enabled: false # disable send to OTLP endpoint

# Expose only health probes
management:
  metrics:
    export.defaults.enabled: false
    enable:
      all: false
      process.cpu: true
      system.cpu: true
      jvm.memory: true
      application: true
  endpoints:
    enabled-by-default: false
    web.exposure.include: health
  info.defaults.enabled: false
  endpoints.enabled-by-default: false
  endpoint:
    health:
      enabled: true
      probes:
        enabled: true

decrypt:
  resources:
    base:
      path: src/test/resources
  private:
    key:
      base64: ${CSV_TRANSACTION_PRIVATE_KEY:LS0tLS1CRUdJTiBQR1AgUFJJVkFURSBLRVkgQkxPQ0stLS0tLQoKbFFJR0JHSWNzZ2dCQkFDNWJzdUFvZDM3UXBtdHY0MW1JR1JaUlgzNkNkYnFjN3JVOVp3MURyN2FLajZDS1VKQQpjZUlRZVNiZXR3NzVQc2RycENSUjZ2RmpxMjNRbnhIalJ6Q1Q2Z0p4Zm9MSEwxeFR3MklhOHZOVzlzUVRaR3owCjd1UUVDM0Nudk1sK3k3a3h2Rmk5bUFTa2VHMCtDaDg2YkgyTjN4eWN3VXpSMVRjVlpaVHBFN3RSSlFBUkFRQUIKL2djREFpT2VtN3ZhcUMzRzhEamlmdWJDdXNGUHdMTnNGYmhGcm1yTVF1QlExYnJNcW16cis2WmU3OTFJU2U5OAptYWpoZjByUW5rS0tQd1VGS05KZFdzSjlYbG9aWXMrQWFUSVNpYkpaZUJqeGk1NzRHYXFoTDh0Vy9kUDBpa3F0ClF2NTJnVFJWdEM1VkRmV09MdnJobVVyNVhrVEtkZ3MzNkl5QnkxZ0tMZTZwWVR6R2VVbHFHcjJ4cW96R1pxMWEKQk9rZ2prR05qc3JhbmxKbWNEbk4zMWFhQXphbGplUXR3U0I5Mm8vRTd5bTltU3pRSkwyQ3J1OVUvMlNvclBEdwpGeWdTTGIwUmxaN2RWTVhtNTZwZ2xDdGVXODQ3c3MzVmdXZGFoZFBHelJqQVVvZ2NoeTc1OG82K1lEbnc1T0VUCkYyZklVQlRLdzk2ZDY4cGhMcmo1N3ovTzFmblBsbW5LZjI1MUEzYm1zcUJFTzBMRENrR1lvT1dpL2JoSmlEbm0KVjYyb1crVWdkR3ZSeEtEbFVoVDBoY2o2Sk8xUWRiQ3JETFpXT05MTFBsU3U2b3doWXRhR1dPNG9PeE5DS0ZBMwpkMjJVMitCM3pjaEtneHROYzM5M0xNazRUNUkvTHhldzB6OU5KbytLNVF3QjRaNXY5akZiV0ZXMFAwZHBiM1poCmJtNXBJRTFoYm1OcGJta2dLRU5vYVdGMlpTQlVaWE4wSUZKVVJDa2dQR2RwYjNaaGJtNXBMbTFoYm1OcGJtbEEKY0dGbmIzQmhMbWwwUG9qU0JCTUJDQUE4RmlFRUVGbHRWbnhaZHlhTDg1S2prWTJDOWFSdTU4RUZBbUljc2dnQwpHd01GQ3drSUJ3SURJZ0lCQmhVS0NRZ0xBZ1FXQWdNQkFoNEhBaGVBQUFvSkVKR05ndldrYnVmQkE2Z0QvaXJVCjQ3SEtZKzVJSWpYQ1VrNEZHY2tCU3dIUUZBdHZQN1BtR3IyU1o4UlphU0dBOHJENWxkZFhaYVdZVEUrRFA1Zm4KUUEyWlQ5bkFENTRLanpQd3V3bDNmZTdScStrYmZGc0UzOWtlK2dnRWhnTjBGSzJ4S08xQ1QyL1k0MkpDckUxSQp0dGN6T2VtK0lvTlo0ampkQlJlYURNaG1ibFpqbFA3Z0JDSC9XWlY5blFJR0JHSWNzZ2dCQkFDM09hVEdER0FPCnlLNncyMTk2K2ZQSkRRSG8vY0VGZGhQNkhRNE5KT0VPd3hOdFpyWnUwd0tSM1dJRnZsVHViSUtQZHZVK3k3WE8KSnJUU3dQWWFyM1FTY0lQV2RKamw1OU1YYWdXL09QaTROMGFwMytVbUo4bU1NSUhyUHdaRG1uT0t1Yzl0UG9URQo5cDBRYTVLTk9DSlNvamljOE9rZDZaK0gzQlRYVXBUZm9RQVJBUUFCL2djREFzQ2J1MENWbmVHNDhDZzd2UlBzCmR5bkwrMUxWNmg0by9EUkFoUHhNL2VhSk9BNWlzUVZENG5zWGdqT1FaMzcwMGZrajBWUW1QR256eERDOUVzclAKS05ndjVpNkNWMDR4KzZLc285QlVtay8yWkxMdHpsTkdUMnVMbVEyU0pta3g2bE9mWStYblYxTGpQaEppMmNHZgo4KytjYmZMS0Ezcm83dnJqUW5hazFqMHkwSFAwVkhtNy9VK3h2UFBNVW5rU0VTZXN4Vy9WV0ord3FDdGEyRlBaCkg2cWVLUVRVRjlaSEVSL3hTOWVlQ0h5a0M4YndFUW5Jb0QvOVFUQSt3Y2VhMHNMdDhKbEVFUG10TTU3S2NEM1UKMEY5QjNOV3FkbGU2TXVielNTWGJCVUU1cndXejJxZ05YTGZ6ZzllMmVIV2xwRURPdWZBMlpIZ0tldEJIOExwSgp1RFVBVnRRT2Fucll5MXdldXkxQTdrQy9sbGhNRzlYVmJtTW9lTGJ6aUFWaFpudFJmKzdNL1pDZ2Z6bjdRSW9mCkxXRTllZTVLR1RQYjRoLy9qY3JVTkxzQ3loTkllYlVRL0hCaU9QSmNxN3dSb0puZ1R5cXVLUlV2OURFRGl5TU4Kenc5UVBta244RzlXeEl3TjlQeXA3cm5wUlgzMERIYUl0Z1FZQVFnQUlCWWhCQkJaYlZaOFdYY21pL09TbzVHTgpndldrYnVmQkJRSmlITElJQWhzTUFBb0pFSkdOZ3ZXa2J1ZkJuMFVFQUxGTGJ3SjR5dlFLNDJ6RWRYYXF4aTVCCm5oKzhaQVIvOG9uOFdhVnFZdUw4NDNjR01jUkRhRjR4emM5UVdwa2hMaUlMVFNnaWZLQ1JGSDl2T04xdVcvR2sKUlBPY2NOQjNydkt5NytpU2hoNmR3anZlSG05ZTdaNlMxaDdsVEsvQUxERUJnQWswSmM3VDJ6ZDR0bXVyaGJQeQo1MFNMOGtnZU9FQWNOc0wwMGx2eAo9OE1DbQotLS0tLUVORCBQR1AgUFJJVkFURSBLRVkgQkxPQ0stLS0tLQo=} # default value is just for testing purposes
      password: ${CSV_TRANSACTION_PRIVATE_KEY_PASS:privatekeypass}
  #      base64: ${} # default value is just for testing purposes
  #      password: ${CSV_TRANSACTION_PRIVATE_KEY_PASS:abwcWUA8igWhzh}
  api:
    baseurl: https://${CSV_TRANSACTION_DECRYPT_HOST:internal.it}
  blobclient:
    basepath: storage
    apikey: ${INTERNAL_SERVICES_API_KEY:myapikey}
    targetContainer:
      rtd: rtd-transactions-decrypted
      ade: ade-transactions-decrypted
  splitter:
    threshold: ${SPLITTER_LINE_THRESHOLD:250000}
  enableChunkUpload: ${ENABLE_CHUNK_UPLOAD:false}
  skipChecksum: ${SKIP_CHECKSUM:false}

---
spring:
  config:
    activate:
      on-profile: test
  cloud:
    stream:
      bindings:
        blobStorageConsumer-in-0: # name must match [handler name]-in-0
          destination: rtd-platform-events
          group: rtd-decrypter-consumer-group
          content-type: application/json
          binder: kafka
      kafka:
        binder:
          auto-create-topics: false
          consumerProperties:
            key:
              deserializer: org.apache.kafka.common.serialization.StringDeserializer
            value:
              deserializer: org.apache.kafka.common.serialization.StringDeserializer

applicationinsights.enabled: false
---
spring:
  config:
    activate:
      on-profile: default
  cloud:
    stream:
      bindings:
        blobStorageConsumer-in-0: # name must match [handler name]-in-0
          destination: rtd-platform-events
          group: rtd-decrypter-consumer-group
          content-type: application/json
          binder: kafka
      kafka:
        binder:
          auto-create-topics: false
          brokers: ${KAFKA_BROKER}
          configuration:
            max.poll.interval.ms: ${CONSUMER_TIMEOUT_MS:600000} # default to 10 min
            max.poll.records: 1
            sasl:
              jaas:
                config: ${KAFKA_SASL_JAAS_CONFIG_CONSUMER_BLOB_STORAGE_EVENTS}
              mechanism: PLAIN
            security:
              protocol: SASL_SSL
          consumerProperties:
            key:
              deserializer: org.apache.kafka.common.serialization.StringDeserializer
            value:
              deserializer: org.apache.kafka.common.serialization.StringDeserializer
            socket:
              connection:
                setup:
                  timeout:
                    max:
                      ms: 200000
                    ms: 100000
            request:
              timeout:
                ms: 60000
            connections:
              max:
                idle:
                  ms: 180000
            max:
              partition:
                fetch:
                  bytes: 10485760
            session:
              timeout:
                ms: 10000
            metadata:
              max:
                age:
                  ms: 180000
            # partition:
            #   assignment:
            #     strategy: org.apache.kafka.clients.consumer.RangeAssignor
